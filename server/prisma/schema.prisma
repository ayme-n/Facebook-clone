// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User{
  id Int @id @default(autoincrement())
  username String @unique
  email String  @unique
  gender String 
  birthday DateTime 
  password String
  name String
  icon String @default("https://res.cloudinary.com/dhm82i8je/image/upload/v1755205884/Deafult_PFP___davy3k_chivjl.jpg")
  cover String @default("https://res.cloudinary.com/dhm82i8je/image/upload/v1755288373/TimelineCovers.pro_only-black-facebook-cover_kcw2yz.jpg")
  
  
  posts Post[]
  comments Comment[]
  likes Like[]

  sended_requests Request[] @relation("sended_requests")
  received_requests Request[] @relation("request_receiver")


  friendsA User[] @relation("UserFriends")
  friendsB User[] @relation("UserFriends")

  followers User[] @relation("UserFollows")
  following User[] @relation("UserFollows")

}

model Post{
    id Int @id @default(autoincrement())
    text String
    created_at DateTime @default(now())
    Poster User @relation(fields: [PosterID],references: [id],onDelete: Cascade)
    PosterID Int
    likes Like[]
    comments Comment[]

}

model Comment{
  id Int @id @default(autoincrement())
  text String
  created_at DateTime @default(now())
  Commenter User @relation(fields: [CommenterID],references: [id],onDelete: Cascade)
  CommenterID Int
  likes Like[]

  PostID Int 
  post Post @relation(fields: [PostID],references: [id],onDelete: Cascade)

}

model Like{
  id Int @id @default(autoincrement())

  Liker User @relation(fields: [LikerID],references: [id],onDelete: Cascade)
  LikerID Int 

  Post Post? @relation(fields: [PostID],references: [id],onDelete: Cascade)
  PostID Int?

  
  Comment Comment? @relation(fields: [CommentID],references: [id],onDelete: Cascade)
  CommentID Int?

}


model Request{
  id Int @id @default(autoincrement())

  Sender User @relation("sended_requests",fields: [SenderID],references: [id],onDelete: Cascade)
  SenderID Int

  Receiver User @relation("request_receiver",fields: [ReceiverID],references: [id],onDelete: Cascade)
  ReceiverID Int

}